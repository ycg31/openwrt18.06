#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2019 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#

name: MyOpenWrt
on:
  release:
    types: published
  push:
#    branches:
#      - master
    paths:
      - '.github/workflows/MyOpenWrt.yml'
#  schedule:
#    - cron: 0 8 * * 5
  watch:
    types: started

jobs:

  build:

    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    
    steps:

      - name: Checkout
        uses: actions/checkout@master
        with:
          ref: master

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          # sudo mkdir -p -m 777 /mnt/openwrt/bin /mnt/openwrt/build_dir/host /mnt/openwrt/build_dir/hostpkg /mnt/openwrt/dl /mnt/openwrt/feeds /mnt/openwrt/staging_dir
          # ln -s /mnt/openwrt/bin ./bin
          # mkdir -p ./build_dir/host && ln -s /mnt/openwrt/build_dir/host ./build_dir/host
          # mkdir -p ./build_dir/host && ln -s /mnt/openwrt/build_dir/hostpkg ./build_dir/hostpkg
          # ln -s /mnt/openwrt/dl ./dl
          # ln -s /mnt/openwrt/feeds ./feeds
          # ln -s /mnt/openwrt/staging_dir ./staging_dir
          df -h
      - name: 自定义配置文件1
        run: |
           rm    -rfv  package/lean/autocore
           rm    -rfv  package/lean/luci-app-adbyby-plus
           cd package/diy
           tar   xvJf  luci-app-docker.tar.xz
           tar   xvJf  luci-app-koolddns.tar.xz
           tar   xvJf  luci-app-rclone.tar.xz
           tar   xvJf  autocore.tar.xz
           tar   xvJf  luci-app-nps.tar.xz
           tar   xvJf  luci-app-adbyby-plus.tar.xz
           git clone  https://github.com/Sweet-Fairy/luci-app-ssr-plus-Jo
           git clone -b lean  https://github.com/Sweet-Fairy/luci-app-ssr-plus-Jo package/luci-app-ssr-plus-lean    
           git clone  https://github.com/Leo-Jo/luci-app-vssr
           git clone  https://github.com/lisaac/luci-lib-docker.git package/luci-lib-docker
           git clone  https://github.com/lisaac/luci-app-dockerman.git package/luci-app-dockerman  
           # ==========ssr-plus-Jo   ssr-plus-lean不要一起编译  +vssr   ==========
           # ==========以上是示范如何加入tar.xz解包和拉github源码编译==========
      - name: 自定义配置文件1
        run: |
           cd package
           git clone   https://github.com/Lienol/openwrt-package   
           rm    -rfv  openwrt-package/package/v2ray-plugin
           rm    -rfv  openwrt-package/package/v2ray
           rm    -rfv  openwrt-package/package/simple-obfs
           rm    -rfv  openwrt-package/package/dns2socks
           rm    -rfv  openwrt-package/package/ipt2socks
           rm    -rfv  openwrt-package/package/shadowsocksr-libev
           rm    -rfv  ipt2socks
           
      - name: 自定义配置文件2
        run: |
           cd package/my
             rm    -rfv  chinadns-ng
             rm    -rfv  luci-app-passwall
             rm    -rfv  tcping    
             
      - name: Update feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      - name: Generate configuration file
        run: |
          rm -f ./.config*
          mv ./myconfig ./.config
          make defconfig
      - name: Make download
        run: |
          make download -j8
          find ./dl/ -size -1024c -exec rm -f {} \;
          df -h
      - name: Compile firmware
        run: |
          make -j$(nproc) || make  V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin
      - name: Prepare artifact
        run: find ./bin/targets/ -type d -name "packages" | xargs rm -rf {}

      - name: Upload firmware
        uses: actions/upload-artifact@master
        with:
          name: OpenWrt18.06 firmware
          path: ./bin/targets/
          
      - name: Upload  IPK
        uses: actions/upload-artifact@master
        with:
          name: OpenWrt18.06 x86 IPK
          path: ./bin/packages/
